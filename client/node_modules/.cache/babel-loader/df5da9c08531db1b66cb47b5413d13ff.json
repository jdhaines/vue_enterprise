{"remainingRequest":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/var/www/vue_enterprise/client/src/utils/dispatch-action-for-all-modules.js","dependencies":[{"path":"/var/www/vue_enterprise/client/src/utils/dispatch-action-for-all-modules.js","mtime":1565713332548},{"path":"/var/www/vue_enterprise/client/.babelrc.js","mtime":1565713332537},{"path":"/var/www/vue_enterprise/client/node_modules/cache-loader/dist/cjs.js","mtime":1565713649664},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1565713477729},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1565713590178}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.flags\";\nimport allModules from '@state/modules';\nimport store from '@state/store';\nexport default function dispatchActionForAllModules(actionName) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$modules = _ref.modules,\n      modules = _ref$modules === void 0 ? allModules : _ref$modules,\n      _ref$modulePrefix = _ref.modulePrefix,\n      modulePrefix = _ref$modulePrefix === void 0 ? '' : _ref$modulePrefix,\n      _ref$flags = _ref.flags,\n      flags = _ref$flags === void 0 ? {} : _ref$flags;\n\n  // For every module...\n  for (var moduleName in modules) {\n    var moduleDefinition = modules[moduleName]; // If the action is defined on the module...\n\n    if (moduleDefinition.actions && moduleDefinition.actions[actionName]) {\n      // Dispatch the action if the module is namespaced. Otherwise,\n      // set a flag to dispatch the action globally at the end.\n      if (moduleDefinition.namespaced) {\n        store.dispatch(\"\".concat(modulePrefix).concat(moduleName, \"/\").concat(actionName));\n      } else {\n        flags.dispatchGlobal = true;\n      }\n    } // If there are any nested sub-modules...\n\n\n    if (moduleDefinition.modules) {\n      // Also dispatch the action for these sub-modules.\n      dispatchActionForAllModules(actionName, {\n        modules: moduleDefinition.modules,\n        modulePrefix: modulePrefix + moduleName + '/',\n        flags: flags\n      });\n    }\n  } // If this is the root and at least one non-namespaced module\n  // was found with the action...\n\n\n  if (!modulePrefix && flags.dispatchGlobal) {\n    // Dispatch the action globally.\n    store.dispatch(actionName);\n  }\n}",{"version":3,"sources":["/var/www/vue_enterprise/client/src/utils/dispatch-action-for-all-modules.js"],"names":["allModules","store","dispatchActionForAllModules","actionName","modules","modulePrefix","flags","moduleName","moduleDefinition","actions","namespaced","dispatch","dispatchGlobal"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,gBAAvB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,eAAe,SAASC,2BAAT,CACbC,UADa,EAGb;AAAA,iFAD0D,EAC1D;AAAA,0BADEC,OACF;AAAA,MADEA,OACF,6BADYJ,UACZ;AAAA,+BADwBK,YACxB;AAAA,MADwBA,YACxB,kCADuC,EACvC;AAAA,wBAD2CC,KAC3C;AAAA,MAD2CA,KAC3C,2BADmD,EACnD;;AACA;AACA,OAAK,IAAMC,UAAX,IAAyBH,OAAzB,EAAkC;AAChC,QAAMI,gBAAgB,GAAGJ,OAAO,CAACG,UAAD,CAAhC,CADgC,CAGhC;;AACA,QAAIC,gBAAgB,CAACC,OAAjB,IAA4BD,gBAAgB,CAACC,OAAjB,CAAyBN,UAAzB,CAAhC,EAAsE;AACpE;AACA;AACA,UAAIK,gBAAgB,CAACE,UAArB,EAAiC;AAC/BT,QAAAA,KAAK,CAACU,QAAN,WAAkBN,YAAlB,SAAiCE,UAAjC,cAA+CJ,UAA/C;AACD,OAFD,MAEO;AACLG,QAAAA,KAAK,CAACM,cAAN,GAAuB,IAAvB;AACD;AACF,KAZ+B,CAchC;;;AACA,QAAIJ,gBAAgB,CAACJ,OAArB,EAA8B;AAC5B;AACAF,MAAAA,2BAA2B,CAACC,UAAD,EAAa;AACtCC,QAAAA,OAAO,EAAEI,gBAAgB,CAACJ,OADY;AAEtCC,QAAAA,YAAY,EAAEA,YAAY,GAAGE,UAAf,GAA4B,GAFJ;AAGtCD,QAAAA,KAAK,EAALA;AAHsC,OAAb,CAA3B;AAKD;AACF,GAzBD,CA2BA;AACA;;;AACA,MAAI,CAACD,YAAD,IAAiBC,KAAK,CAACM,cAA3B,EAA2C;AACzC;AACAX,IAAAA,KAAK,CAACU,QAAN,CAAeR,UAAf;AACD;AACF","sourcesContent":["import allModules from '@state/modules'\nimport store from '@state/store'\n\nexport default function dispatchActionForAllModules(\n  actionName,\n  { modules = allModules, modulePrefix = '', flags = {} } = {}\n) {\n  // For every module...\n  for (const moduleName in modules) {\n    const moduleDefinition = modules[moduleName]\n\n    // If the action is defined on the module...\n    if (moduleDefinition.actions && moduleDefinition.actions[actionName]) {\n      // Dispatch the action if the module is namespaced. Otherwise,\n      // set a flag to dispatch the action globally at the end.\n      if (moduleDefinition.namespaced) {\n        store.dispatch(`${modulePrefix}${moduleName}/${actionName}`)\n      } else {\n        flags.dispatchGlobal = true\n      }\n    }\n\n    // If there are any nested sub-modules...\n    if (moduleDefinition.modules) {\n      // Also dispatch the action for these sub-modules.\n      dispatchActionForAllModules(actionName, {\n        modules: moduleDefinition.modules,\n        modulePrefix: modulePrefix + moduleName + '/',\n        flags,\n      })\n    }\n  }\n\n  // If this is the root and at least one non-namespaced module\n  // was found with the action...\n  if (!modulePrefix && flags.dispatchGlobal) {\n    // Dispatch the action globally.\n    store.dispatch(actionName)\n  }\n}\n"]}]}