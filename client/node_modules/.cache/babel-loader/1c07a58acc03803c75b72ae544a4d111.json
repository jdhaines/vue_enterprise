{"remainingRequest":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/var/www/vue_enterprise/client/src/state/modules/users.js","dependencies":[{"path":"/var/www/vue_enterprise/client/src/state/modules/users.js","mtime":1565713332548},{"path":"/var/www/vue_enterprise/client/.babelrc.js","mtime":1565713332537},{"path":"/var/www/vue_enterprise/client/node_modules/cache-loader/dist/cjs.js","mtime":1565713649664},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1565713477729},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1565713590178}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport axios from 'axios';\nexport var state = {\n  cached: []\n};\nexport var getters = {};\nexport var mutations = {\n  CACHE_USER: function CACHE_USER(state, newUser) {\n    state.cached.push(newUser);\n  }\n};\nexport var actions = {\n  fetchUser: function fetchUser(_ref, _ref2) {\n    var commit = _ref.commit,\n        state = _ref.state,\n        rootState = _ref.rootState;\n    var username = _ref2.username;\n    // 1. Check if we already have the user as a current user.\n    var currentUser = rootState.auth.currentUser;\n\n    if (currentUser && currentUser.username === username) {\n      return Promise.resolve(currentUser);\n    } // 2. Check if we've already fetched and cached the user.\n\n\n    var matchedUser = state.cached.find(function (user) {\n      return user.username === username;\n    });\n\n    if (matchedUser) {\n      return Promise.resolve(currentUser);\n    } // 3. Fetch the user from the API and cache it in case\n    //    we need it again in the future.\n\n\n    return axios.get(\"/api/users/\".concat(username)).then(function (response) {\n      var user = response.data;\n      commit('CACHE_USER', user);\n      return user;\n    });\n  }\n};",{"version":3,"sources":["/var/www/vue_enterprise/client/src/state/modules/users.js"],"names":["axios","state","cached","getters","mutations","CACHE_USER","newUser","push","actions","fetchUser","commit","rootState","username","currentUser","auth","Promise","resolve","matchedUser","find","user","get","then","response","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,KAAK,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAAd;AAIP,OAAO,IAAMC,OAAO,GAAG,EAAhB;AAEP,OAAO,IAAMC,SAAS,GAAG;AACvBC,EAAAA,UADuB,sBACZJ,KADY,EACLK,OADK,EACI;AACzBL,IAAAA,KAAK,CAACC,MAAN,CAAaK,IAAb,CAAkBD,OAAlB;AACD;AAHsB,CAAlB;AAMP,OAAO,IAAME,OAAO,GAAG;AACrBC,EAAAA,SADqB,kCACiC;AAAA,QAA1CC,MAA0C,QAA1CA,MAA0C;AAAA,QAAlCT,KAAkC,QAAlCA,KAAkC;AAAA,QAA3BU,SAA2B,QAA3BA,SAA2B;AAAA,QAAZC,QAAY,SAAZA,QAAY;AACpD;AADoD,QAE5CC,WAF4C,GAE5BF,SAAS,CAACG,IAFkB,CAE5CD,WAF4C;;AAGpD,QAAIA,WAAW,IAAIA,WAAW,CAACD,QAAZ,KAAyBA,QAA5C,EAAsD;AACpD,aAAOG,OAAO,CAACC,OAAR,CAAgBH,WAAhB,CAAP;AACD,KALmD,CAOpD;;;AACA,QAAMI,WAAW,GAAGhB,KAAK,CAACC,MAAN,CAAagB,IAAb,CAAkB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACP,QAAL,KAAkBA,QAA5B;AAAA,KAAlB,CAApB;;AACA,QAAIK,WAAJ,EAAiB;AACf,aAAOF,OAAO,CAACC,OAAR,CAAgBH,WAAhB,CAAP;AACD,KAXmD,CAapD;AACA;;;AACA,WAAOb,KAAK,CAACoB,GAAN,sBAAwBR,QAAxB,GAAoCS,IAApC,CAAyC,UAACC,QAAD,EAAc;AAC5D,UAAMH,IAAI,GAAGG,QAAQ,CAACC,IAAtB;AACAb,MAAAA,MAAM,CAAC,YAAD,EAAeS,IAAf,CAAN;AACA,aAAOA,IAAP;AACD,KAJM,CAAP;AAKD;AArBoB,CAAhB","sourcesContent":["import axios from 'axios'\n\nexport const state = {\n  cached: [],\n}\n\nexport const getters = {}\n\nexport const mutations = {\n  CACHE_USER(state, newUser) {\n    state.cached.push(newUser)\n  },\n}\n\nexport const actions = {\n  fetchUser({ commit, state, rootState }, { username }) {\n    // 1. Check if we already have the user as a current user.\n    const { currentUser } = rootState.auth\n    if (currentUser && currentUser.username === username) {\n      return Promise.resolve(currentUser)\n    }\n\n    // 2. Check if we've already fetched and cached the user.\n    const matchedUser = state.cached.find((user) => user.username === username)\n    if (matchedUser) {\n      return Promise.resolve(currentUser)\n    }\n\n    // 3. Fetch the user from the API and cache it in case\n    //    we need it again in the future.\n    return axios.get(`/api/users/${username}`).then((response) => {\n      const user = response.data\n      commit('CACHE_USER', user)\n      return user\n    })\n  },\n}\n"]}]}