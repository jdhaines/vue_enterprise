{"remainingRequest":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/var/www/vue_enterprise/client/src/router/routes.js","dependencies":[{"path":"/var/www/vue_enterprise/client/src/router/routes.js","mtime":1565713332546},{"path":"/var/www/vue_enterprise/client/.babelrc.js","mtime":1565713332537},{"path":"/var/www/vue_enterprise/client/node_modules/cache-loader/dist/cjs.js","mtime":1565713649664},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1565713477729},{"path":"/var/www/vue_enterprise/client/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1565713590178}],"contextDependencies":[],"result":["import _objectSpread from \"/var/www/vue_enterprise/client/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport store from '@state/store';\nexport default [{\n  path: '/',\n  name: 'home',\n  component: function component() {\n    return lazyLoadView(import('@views/home'));\n  }\n}, {\n  path: '/login',\n  name: 'login',\n  component: function component() {\n    return lazyLoadView(import('@views/login'));\n  },\n  meta: {\n    beforeResolve: function beforeResolve(routeTo, routeFrom, next) {\n      // If the user is already logged in\n      if (store.getters['auth/loggedIn']) {\n        // Redirect to the home page instead\n        next({\n          name: 'home'\n        });\n      } else {\n        // Continue to the login page\n        next();\n      }\n    }\n  }\n}, {\n  path: '/profile',\n  name: 'profile',\n  component: function component() {\n    return lazyLoadView(import('@views/profile'));\n  },\n  meta: {\n    authRequired: true\n  },\n  props: function props(route) {\n    return {\n      user: store.state.auth.currentUser || {}\n    };\n  }\n}, {\n  path: '/profile/:username',\n  name: 'username-profile',\n  component: function component() {\n    return lazyLoadView(import('@views/profile'));\n  },\n  meta: {\n    authRequired: true,\n    beforeResolve: function beforeResolve(routeTo, routeFrom, next) {\n      store // Try to fetch the user's information by their username\n      .dispatch('users/fetchUser', {\n        username: routeTo.params.username\n      }).then(function (user) {\n        // Add the user to the route params, so that it can\n        // be provided as a prop for the view component below.\n        routeTo.params.user = user; // Continue to the route.\n\n        next();\n      }).catch(function () {\n        // If a user with the provided username could not be\n        // found, redirect to the 404 page.\n        next({\n          name: '404',\n          params: {\n            resource: 'User'\n          }\n        });\n      });\n    }\n  },\n  // Set the user from the route params, once it's set in the\n  // beforeResolve route guard.\n  props: function props(route) {\n    return {\n      user: route.params.user\n    };\n  }\n}, {\n  path: '/logout',\n  name: 'logout',\n  meta: {\n    authRequired: true,\n    beforeResolve: function beforeResolve(routeTo, routeFrom, next) {\n      store.dispatch('auth/logOut');\n      var authRequiredOnPreviousRoute = routeFrom.matched.some(function (route) {\n        return route.meta.authRequired;\n      }); // Navigate back to previous page, or home as a fallback\n\n      next(authRequiredOnPreviousRoute ? {\n        name: 'home'\n      } : _objectSpread({}, routeFrom));\n    }\n  }\n}, {\n  path: '/404',\n  name: '404',\n  component: require('@views/_404').default,\n  // Allows props to be passed to the 404 page through route\n  // params, such as `resource` to define what wasn't found.\n  props: true\n}, // Redirect any unmatched routes to the 404 page. This may\n// require some server configuration to work in production:\n// https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n{\n  path: '*',\n  redirect: '404'\n}]; // Lazy-loads view components, but with better UX. A loading view\n// will be used if the component takes a while to load, falling\n// back to a timeout view in case the page fails to load. You can\n// use this component to lazy-load a route with:\n//\n// component: () => lazyLoadView(import('@views/my-view'))\n//\n// NOTE: Components loaded with this strategy DO NOT have access\n// to in-component guards, such as beforeRouteEnter,\n// beforeRouteUpdate, and beforeRouteLeave. You must either use\n// route-level guards instead or lazy-load the component directly:\n//\n// component: () => import('@views/my-view')\n//\n\nfunction lazyLoadView(AsyncView) {\n  var AsyncHandler = function AsyncHandler() {\n    return {\n      component: AsyncView,\n      // A component to use while the component is loading.\n      loading: require('@views/_loading').default,\n      // Delay before showing the loading component.\n      // Default: 200 (milliseconds).\n      delay: 400,\n      // A fallback component in case the timeout is exceeded\n      // when loading the component.\n      error: require('@views/_timeout').default,\n      // Time before giving up trying to load the component.\n      // Default: Infinity (milliseconds).\n      timeout: 10000\n    };\n  };\n\n  return Promise.resolve({\n    functional: true,\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          children = _ref.children;\n      // Transparently pass any props or children\n      // to the view component.\n      return h(AsyncHandler, data, children);\n    }\n  });\n}",{"version":3,"sources":["/var/www/vue_enterprise/client/src/router/routes.js"],"names":["store","path","name","component","lazyLoadView","meta","beforeResolve","routeTo","routeFrom","next","getters","authRequired","props","route","user","state","auth","currentUser","dispatch","username","params","then","catch","resource","authRequiredOnPreviousRoute","matched","some","require","default","redirect","AsyncView","AsyncHandler","loading","delay","error","timeout","Promise","resolve","functional","render","h","data","children"],"mappings":"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","sourcesContent":["import store from '@state/store'\n\nexport default [\n  {\n    path: '/',\n    name: 'home',\n    component: () => lazyLoadView(import('@views/home')),\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: () => lazyLoadView(import('@views/login')),\n    meta: {\n      beforeResolve(routeTo, routeFrom, next) {\n        // If the user is already logged in\n        if (store.getters['auth/loggedIn']) {\n          // Redirect to the home page instead\n          next({ name: 'home' })\n        } else {\n          // Continue to the login page\n          next()\n        }\n      },\n    },\n  },\n  {\n    path: '/profile',\n    name: 'profile',\n    component: () => lazyLoadView(import('@views/profile')),\n    meta: {\n      authRequired: true,\n    },\n    props: (route) => ({ user: store.state.auth.currentUser || {} }),\n  },\n  {\n    path: '/profile/:username',\n    name: 'username-profile',\n    component: () => lazyLoadView(import('@views/profile')),\n    meta: {\n      authRequired: true,\n      beforeResolve(routeTo, routeFrom, next) {\n        store\n          // Try to fetch the user's information by their username\n          .dispatch('users/fetchUser', { username: routeTo.params.username })\n          .then((user) => {\n            // Add the user to the route params, so that it can\n            // be provided as a prop for the view component below.\n            routeTo.params.user = user\n            // Continue to the route.\n            next()\n          })\n          .catch(() => {\n            // If a user with the provided username could not be\n            // found, redirect to the 404 page.\n            next({ name: '404', params: { resource: 'User' } })\n          })\n      },\n    },\n    // Set the user from the route params, once it's set in the\n    // beforeResolve route guard.\n    props: (route) => ({ user: route.params.user }),\n  },\n  {\n    path: '/logout',\n    name: 'logout',\n    meta: {\n      authRequired: true,\n      beforeResolve(routeTo, routeFrom, next) {\n        store.dispatch('auth/logOut')\n        const authRequiredOnPreviousRoute = routeFrom.matched.some(\n          (route) => route.meta.authRequired\n        )\n        // Navigate back to previous page, or home as a fallback\n        next(authRequiredOnPreviousRoute ? { name: 'home' } : { ...routeFrom })\n      },\n    },\n  },\n  {\n    path: '/404',\n    name: '404',\n    component: require('@views/_404').default,\n    // Allows props to be passed to the 404 page through route\n    // params, such as `resource` to define what wasn't found.\n    props: true,\n  },\n  // Redirect any unmatched routes to the 404 page. This may\n  // require some server configuration to work in production:\n  // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n  {\n    path: '*',\n    redirect: '404',\n  },\n]\n\n// Lazy-loads view components, but with better UX. A loading view\n// will be used if the component takes a while to load, falling\n// back to a timeout view in case the page fails to load. You can\n// use this component to lazy-load a route with:\n//\n// component: () => lazyLoadView(import('@views/my-view'))\n//\n// NOTE: Components loaded with this strategy DO NOT have access\n// to in-component guards, such as beforeRouteEnter,\n// beforeRouteUpdate, and beforeRouteLeave. You must either use\n// route-level guards instead or lazy-load the component directly:\n//\n// component: () => import('@views/my-view')\n//\nfunction lazyLoadView(AsyncView) {\n  const AsyncHandler = () => ({\n    component: AsyncView,\n    // A component to use while the component is loading.\n    loading: require('@views/_loading').default,\n    // Delay before showing the loading component.\n    // Default: 200 (milliseconds).\n    delay: 400,\n    // A fallback component in case the timeout is exceeded\n    // when loading the component.\n    error: require('@views/_timeout').default,\n    // Time before giving up trying to load the component.\n    // Default: Infinity (milliseconds).\n    timeout: 10000,\n  })\n\n  return Promise.resolve({\n    functional: true,\n    render(h, { data, children }) {\n      // Transparently pass any props or children\n      // to the view component.\n      return h(AsyncHandler, data, children)\n    },\n  })\n}\n"]}]}